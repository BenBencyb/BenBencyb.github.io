<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小奇冰</title>
  
  <subtitle>云在青天水在瓶</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-25T03:04:10.981Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小奇冰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试</title>
    <link href="http://yoursite.com/2018/12/25/hello-world/"/>
    <id>http://yoursite.com/2018/12/25/hello-world/</id>
    <published>2018-12-25T03:04:10.850Z</published>
    <updated>2018-12-25T03:04:10.981Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx 快速入门</title>
    <link href="http://yoursite.com/2017/10/18/springBoot%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/18/springBoot教程（一）/</id>
    <published>2017-10-18T13:28:13.000Z</published>
    <updated>2018-12-25T06:00:20.881Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow97db1io.bkt.clouddn.com/nginx-logo.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>Nginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性。</p><h3 id="1-1-作为-Web-服务器"><a href="#1-1-作为-Web-服务器" class="headerlink" title="1.1 作为 Web 服务器"></a>1.1 作为 Web 服务器</h3><p>相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率。能够支持高达 50,000 个并发连接数的响应，其使用 epoll and kqueue 作为开发模型。</p><h3 id="1-2-作为负载均衡服务器"><a href="#1-2-作为负载均衡服务器" class="headerlink" title="1.2 作为负载均衡服务器"></a>1.2 作为负载均衡服务器</h3><p>Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。</p><p>Nginx 安装非常的简单，配置文件 非常简洁（还能够支持perl语法），Bugs 非常少的服务器: Nginx 启动特别容易，并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="2-1-添加仓库资源"><a href="#2-1-添加仓库资源" class="headerlink" title="2.1 添加仓库资源"></a>2.1 添加仓库资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p><strong>注意 baseurl=<a href="http://nginx.org/packages/OS/OSRELEASE/$basearch/" target="_blank" rel="noopener">http://nginx.org/packages/OS/OSRELEASE/$basearch/</a> 中 OS/OSRELEASE 表示系统和版本号，根据自己情况而定。</strong></p><a id="more"></a><h3 id="2-2-查看-yum-资源列表"><a href="#2-2-查看-yum-资源列表" class="headerlink" title="2.2 查看 yum 资源列表"></a>2.2 查看 yum 资源列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep nginx</span><br></pre></td></tr></table></figure><h3 id="2-3-安装"><a href="#2-3-安装" class="headerlink" title="2.3 安装"></a>2.3 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h3 id="2-4-查看版本"><a href="#2-4-查看版本" class="headerlink" title="2.4 查看版本"></a>2.4 查看版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v # 使用 -V 可以查看 nginx 安装时依赖的模块</span><br></pre></td></tr></table></figure><h3 id="2-5-常用命令"><a href="#2-5-常用命令" class="headerlink" title="2.5 常用命令"></a>2.5 常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启动 nginx 服务</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"># 重启 nginx 服务</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"># 关闭 nginx 服务</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line"># 测试 nginx.conf 配置文件合法性</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><h3 id="2-6-信号量"><a href="#2-6-信号量" class="headerlink" title="2.6 信号量"></a>2.6 信号量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 重新加载配置文件</span><br><span class="line">kill HUP `cat /var/run/nginx.pid`</span><br><span class="line"></span><br><span class="line"># 重读日志文件</span><br><span class="line">kill USR1 `cat /var/run/nginx.pid`</span><br></pre></td></tr></table></figure><p>下图为启动 nginx 服务的默认首页：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow97db1io.bkt.clouddn.com/nginx-01.jpg" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h2 id="三、目录-文件介绍"><a href="#三、目录-文件介绍" class="headerlink" title="三、目录/文件介绍"></a>三、目录/文件介绍</h2><h3 id="3-1-目录介绍"><a href="#3-1-目录介绍" class="headerlink" title="3.1 目录介绍"></a>3.1 目录介绍</h3><p>日志相关</p><ul><li><p>/etc/logrotate.d/nginx : nginx 日志轮转，用于 logrotate 服务的日志切割</p></li><li><p>/var/log/nginx：存放请求日志和错误日志</p></li></ul><p>服务配置相关</p><ul><li><p>/etc/nginx/nginx.conf：主配置文件</p></li><li><p>/etc/nginx/conf.d/default.conf：默认加载配置文件</p></li></ul><p>编码相关</p><ul><li><p>/etc/nginx/koi-utf</p></li><li><p>/etc/nginx/koi-win</p></li><li><p>/etc/nginx/win-utf</p></li></ul><p>请求类型相关</p><ul><li>/etc/nginx/mime.types：设置 http 协议的 Content-Type 与扩展名对应关系</li></ul><p>守护进程相关</p><ul><li><p>/usr/lib/systemd/system/nginx-debug.service</p></li><li><p>/usr/lib/systemd/system/nginx.service</p></li><li><p>/etc/sysconfig/nginx</p></li><li><p>/etc/sysconfig/nginx-debug</p></li></ul><p>模块相关</p><ul><li><p>/usr/lib64/nginx/modules</p></li><li><p>/etc/nginx/modules</p></li></ul><p>命令相关</p><ul><li><p>/usr/sbin/nginx</p></li><li><p>/usr/sbin/nginx-debug</p></li></ul><p>帮助文档</p><ul><li>/usr/share/doc/nginx-1.12.1</li></ul><p>缓存相关</p><ul><li>/var/cache/nginx</li></ul><h3 id="3-2-配置文件介绍"><a href="#3-2-配置文件介绍" class="headerlink" title="3.2 配置文件介绍"></a>3.2 配置文件介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nginx;</span><br><span class="line"></span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line"></span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"></span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        </span><br><span class="line">        #定义使用 www.extlight.com访问</span><br><span class="line">        server_name  www.extlight.com;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            #定义服务器的默认网站根目录位置</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">             </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、location-讲解"><a href="#四、location-讲解" class="headerlink" title="四、location 讲解"></a>四、location 讲解</h2><p>location 用于匹配客户端发送的 url ，从而定位请求资源。</p><p>匹配方式大致分成 3 类：</p><ul><li><p>location = xxx {}    精准匹配</p></li><li><p>location pattern {}  一般匹配</p></li><li><p>location ~ pattern {} 正则表达式匹配</p></li></ul><h3 id="4-1-案例分析"><a href="#4-1-案例分析" class="headerlink" title="4.1 案例分析"></a>4.1 案例分析</h3><p>假设 Nginx 配置文件中的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">    [ 配置 A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    [ 配置 B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /documents/ &#123;</span><br><span class="line">    [ 配置 C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">    [ 配置 D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">    [ 配置 E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当请求 <a href="http://192.168.2.25/" target="_blank" rel="noopener">http://192.168.2.25/</a> 时，会定位到配置 A；</p><p>当请求 <a href="http://192.168.2.25/index.html" target="_blank" rel="noopener">http://192.168.2.25/index.html</a> 时，会定位到配置 B；</p><p>当请求 <a href="http://192.168.2.25/documents/document.html" target="_blank" rel="noopener">http://192.168.2.25/documents/document.html</a> 时，会定位到配置 C；</p><p>当请求 <a href="http://192.168.2.25/images/1.gif" target="_blank" rel="noopener">http://192.168.2.25/images/1.gif</a> 时，会定位到配置 D；</p><p>当请求 <a href="http://192.168.2.25/documents/1.jpg" target="_blank" rel="noopener">http://192.168.2.25/documents/1.jpg</a> 时，会定位到配置 E。 </p><h2 id="五、rewrite-重写"><a href="#五、rewrite-重写" class="headerlink" title="五、rewrite 重写"></a>五、rewrite 重写</h2><p>使用 Nginx 提供的全局变量或自己设置的变量，结合正则表达式和标志位实现 url 重写以及重定向。</p><p>rewrite 使用范围：在 server、location 和 if 中。</p><p>rewrite 与 location 的区别：rewrite 是在同一域名内更改获取资源的路径，而 location 是对一类路径做控制访问或反向代理。</p><h3 id="5-1-rewrite-语法"><a href="#5-1-rewrite-语法" class="headerlink" title="5.1 rewrite 语法"></a>5.1 rewrite 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite regex replacement [flag]</span><br></pre></td></tr></table></figure><p>语法说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">regex：正则表达式</span><br><span class="line">replacement ：重定向位置</span><br><span class="line">flag：标志位</span><br><span class="line">    last : 相当于Apache的[L]标记，表示完成rewrite</span><br><span class="line">    break : 停止执行当前虚拟主机的后续rewrite指令集</span><br><span class="line">    redirect : 返回302临时重定向，地址栏会显示跳转后的地址</span><br><span class="line">    permanent : 返回301永久重定向，地址栏会显示跳转后的地址</span><br></pre></td></tr></table></figure><h3 id="5-2-if-指令语法"><a href="#5-2-if-指令语法" class="headerlink" title="5.2 if 指令语法"></a>5.2 if 指令语法</h3><p>如果在 if 中执行 rewrite 操作，需要了解如下判断规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(condition)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>判断规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当表达式只是一个变量时，如果值为空或任何以 0 开头的字符串都会当做 false</span><br><span class="line">直接比较变量和内容时，使用 = 或 !=</span><br><span class="line">~ 正则表达式匹配，~*不区分大小写的匹配，!~ 区分大小写的不匹配</span><br><span class="line">-f 和 !-f 用来判断是否存在文件</span><br><span class="line">-d 和 !-d 用来判断是否存在目录</span><br><span class="line">-e 和 !-e 用来判断是否存在文件或目录</span><br><span class="line">-x 和 !-x 用来判断文件是否可执行</span><br></pre></td></tr></table></figure></p><h3 id="5-3-案例分析"><a href="#5-3-案例分析" class="headerlink" title="5.3 案例分析"></a>5.3 案例分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ /msie/$1 break; # 如果UA包含&quot;MSIE&quot;，rewrite请求到/msie/目录下</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1; # 如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line">if ($request_method = POST) &#123;</span><br><span class="line">    return 405; # 如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k; # 限速，$slow可以通过 set 指令设置</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass  http://127.0.0.1; # 如果请求的文件名不存在，则反向代理到 localhost 。这里的break也是停止rewrite检查</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if ($args ~ post=140)&#123;</span><br><span class="line">    rewrite ^ http://example.com/ permanent; # 如果query string中包含&quot;post=140&quot;，永久重定向到 example.com</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用变量如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$args             # 这个变量等于请求行中的参数，同 $query_string</span><br><span class="line">$content_length   # 请求头中的 Content-length 字段。</span><br><span class="line">$content_type     # 请求头中的 Content-Type 字段。</span><br><span class="line">$document_root    # 当前请求在 root 指令中指定的值。</span><br><span class="line">$host             # 请求主机头字段，否则为服务器名称。</span><br><span class="line">$http_user_agent  # 客户端 agent 信息</span><br><span class="line">$http_cookie      # 客户端 cookie 信息</span><br><span class="line">$limit_rate       # 这个变量可以限制连接速率。</span><br><span class="line">$request_method   # 客户端请求的动作，通常为 GET 或 POST。</span><br><span class="line">$remote_addr      # 客户端的IP地址。</span><br><span class="line">$remote_port      # 客户端的端口。</span><br><span class="line">$remote_user      # 已经经过 Auth Basic Module 验证的用户名。</span><br><span class="line">$request_filename # 当前请求的文件路径，由 root 或 alias 指令与 URI 请求生成。</span><br><span class="line">$scheme           # HTTP 方法（如http，https）。</span><br><span class="line">$server_protocol  # 请求使用的协议，通常是 HTTP/1.0 或 HTTP/1.1。</span><br><span class="line">$server_addr      # 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">$server_name      # 服务器名称。</span><br><span class="line">$server_port      # 请求到达服务器的端口号。</span><br><span class="line">$request_uri      # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">$uri              # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="line">$document_uri     # 与 $uri 相同。</span><br></pre></td></tr></table></figure><h2 id="六、访问控制"><a href="#六、访问控制" class="headerlink" title="六、访问控制"></a>六、访问控制</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_access_module.html" target="_blank" rel="noopener">ngx_http_access_module</a></strong> 模块。</p><p>在 /etc/nginx/nginx.conf 文件末尾中，有一行 include /etc/nginx/conf.d/*.conf; 设置，表示该文件会引入 /etc/nginx/conf.d/ 下的 .conf 结尾的文件。</p><p>在 /etc/nginx/conf.d/ 下有一个 default.conf 文件，我们修改其部分内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server_name  access;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">    deny   192.168.2.2;</span><br><span class="line">    allow all;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 location 中配置了 deny 和 allow，表示除了 192.168.2.2 的 ip，允许其他 ip 访问 nginx。其中，192.168.2.2 为宿主机 ip 地址。</p><h2 id="七、文件压缩"><a href="#七、文件压缩" class="headerlink" title="七、文件压缩"></a>七、文件压缩</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html" target="_blank" rel="noopener">ngx_http_gzip_module</a></strong> 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(jpg|gif|png|txt|xml)$ &#123;</span><br><span class="line">    gzip on; </span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/jpeg image/gif image/png</span><br><span class="line">    ;</span><br><span class="line">    root /opt/test;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压缩 /opt/test 目录下的资源。可通过浏览器调试工具查看请求返回加载资源文件的大小。</p><p>常用配置说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gzip on|off;  # 是否开启 gzip</span><br><span class="line">gzip_buffers 32 4k|16 8k; # 缓冲，压缩在内存中缓存分成几块，每块大小</span><br><span class="line">gzip_comp_level [1~9]; # 推荐使用 6。压缩级别越高，越浪费 cpu 计算资源</span><br><span class="line">gzip_disable</span><br><span class="line">gzip_min_length 200; # 大于 200 字节就进行文件压缩</span><br><span class="line">gzip_http_version 1.0|1.1; # 使用http/1.1 协议才进行文件压缩</span><br><span class="line">gzip_types text/plain # 设置需要压缩文件的类型</span><br><span class="line">gzip_vary on|off # 是否传输 gzip 压缩标识</span><br></pre></td></tr></table></figure><h2 id="八、静态资源缓存"><a href="#八、静态资源缓存" class="headerlink" title="八、静态资源缓存"></a>八、静态资源缓存</h2><p>依赖 <a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html" target="_blank" rel="noopener">ngx_http_headers_module</a> 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(jpg|gif|png|txt|xml)$ &#123;</span><br><span class="line">    expires 24h</span><br><span class="line">    root /opt/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向响应头中添加 Cache-Control，设置缓存时间为 24 小时。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expires 60s; # 60 秒</span><br><span class="line"></span><br><span class="line">expires 10m; # 10 分钟</span><br><span class="line"></span><br><span class="line">expires 2h;  # 2 小时</span><br><span class="line"></span><br><span class="line">expires 30d; # 30 天</span><br></pre></td></tr></table></figure><h2 id="九、跨域"><a href="#九、跨域" class="headerlink" title="九、跨域"></a>九、跨域</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html" target="_blank" rel="noopener">ngx_http_headers_module</a></strong> 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location ~* \.(jpg|gif|png|txt|xml)$ &#123;</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/jpeg image/gif image/png</span><br><span class="line">    ;</span><br><span class="line">    </span><br><span class="line">    # 设置允许跨域请求</span><br><span class="line">    add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">    add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">    add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST,PUT,DELETE, OPTIONS&apos;;</span><br><span class="line">    </span><br><span class="line">    root /opt/test;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、防盗链"><a href="#十、防盗链" class="headerlink" title="十、防盗链"></a>十、防盗链</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_referer_module.html" target="_blank" rel="noopener">ngx_http_referer_module</a></strong> 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(jpg|gif|png|txt|xml)$ &#123;</span><br><span class="line">     </span><br><span class="line">    valid_referers none blocked 192.168.2.25;</span><br><span class="line"></span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只允许 192.168.2.25 的服务器请求资源。</p><h2 id="十一、反向代理"><a href="#十一、反向代理" class="headerlink" title="十一、反向代理"></a>十一、反向代理</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">ngx_http_proxy_module</a></strong> 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">listen       80;</span><br><span class="line">    </span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://192.168.2.25:8080;</span><br><span class="line">    proxy_redirect default;</span><br><span class="line">    </span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    </span><br><span class="line">    proxy_connect_timeout 30;</span><br><span class="line">    proxy_send_timeout 30;</span><br><span class="line">    proxy_read_timeout 30;</span><br><span class="line">    </span><br><span class="line">    proxy_buffer_size 32k;</span><br><span class="line">    proxy_buffering on;</span><br><span class="line">    proxy_buffers 4 128k;</span><br><span class="line">    proxy_busy_buffers_size 256k;</span><br><span class="line">    proxy_max_temp_file_size 256k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8080 端口为 tomcat 启动端口。浏览器访问 <a href="http://192.168.2.25" target="_blank" rel="noopener">http://192.168.2.25</a> 后会看到 tomcat 首页。</p><p>常用配置说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header xx xx;         # 设置主机头和客户端真实地址，以便服务器获取客户端真实IP                                </span><br><span class="line">proxy_connect_timeout 30;       # nginx 与后端服务器连接超时时间</span><br><span class="line">proxy_send_timeout 30;          # 后端服务器回传数据时间，时间到中断连接</span><br><span class="line">proxy_read_timeout 30;          # nginx 拂去后端服务器数据时间</span><br><span class="line">proxy_buffering on|off;         # 是否开启缓存</span><br><span class="line">proxy_buffer_size 32k;          # 缓冲区大小</span><br><span class="line">proxy_buffers 4 128k;           # 缓冲区数量和大小</span><br><span class="line">proxy_busy_buffers_size 256k;   # 设置系统很忙时可以使用的 proxy_buffers的大小，官方推荐位proxy_buffers * 2</span><br><span class="line">proxy_temp_file_write_size 32k; # 当后端服务器的响应过大时 Nginx 一次性写入临时文件的数据大小</span><br><span class="line">proxy_max_temp_file_size 256k;  # 每个请求能用磁盘上临时文件最大大小</span><br></pre></td></tr></table></figure><h2 id="十二、负载均衡"><a href="#十二、负载均衡" class="headerlink" title="十二、负载均衡"></a>十二、负载均衡</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="noopener">ngx_http_upstream_module</a></strong> 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream mytomcat &#123;</span><br><span class="line">    server 192.168.2.25:8081;</span><br><span class="line">    server 192.168.2.25:8082;</span><br><span class="line">    server 192.168.2.25:8083;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://mytomcat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 3 个 tomcat 服务。浏览器访问 <a href="http://192.168.2.25" target="_blank" rel="noopener">http://192.168.2.25</a>，nginx 默认通过轮询方式将请求转发给 3 个 tomcat 服务。</p><h2 id="十三、代理缓存"><a href="#十三、代理缓存" class="headerlink" title="十三、代理缓存"></a>十三、代理缓存</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">ngx_http_proxy_module</a></strong> 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">upstream mytomcat &#123;</span><br><span class="line">    server 192.168.2.25:8081;</span><br><span class="line">    server 192.168.2.25:8082;</span><br><span class="line">    server 192.168.2.25:8083;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_cache_path /usr/proxy/cache level=1:2 keys_zone=light_cache:10m max_size=10g inactive=60m use_temp_path=off;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://mytomcat;</span><br><span class="line">        </span><br><span class="line">        proxy_cache light_cache;</span><br><span class="line">        proxy_cache_valid 200 304 12h;</span><br><span class="line">        proxy_cache_valid any 10m;</span><br><span class="line">        proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">        add_header Nginx-Cache &quot;$upstream_cache_status&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十四、配置-HTTPS"><a href="#十四、配置-HTTPS" class="headerlink" title="十四、配置 HTTPS"></a>十四、配置 HTTPS</h2><p>依赖 <strong><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html" target="_blank" rel="noopener">ngx_http_ssl_module</a></strong> 模块。</p><p>需要开发者购买 CA 证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  443;</span><br><span class="line">    </span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate  /etc/nginx/cert/xxx.pem;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/cert/xxx.key;</span><br><span class="line">    </span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十五、参考资料"><a href="#十五、参考资料" class="headerlink" title="十五、参考资料"></a>十五、参考资料</h2><ul><li><a href="http://nginx.org/en/linux_packages.html" target="_blank" rel="noopener">http://nginx.org/en/linux_packages.html</a></li><li><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></li><li><a href="http://www.nginx.cn/doc/index.html" target="_blank" rel="noopener">http://www.nginx.cn/doc/index.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://ow97db1io.bkt.clouddn.com/nginx-logo.png&quot; alt=&quot;image&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;image&lt;/div&gt;
            &lt;/figure&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;Nginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性。&lt;/p&gt;
&lt;h3 id=&quot;1-1-作为-Web-服务器&quot;&gt;&lt;a href=&quot;#1-1-作为-Web-服务器&quot; class=&quot;headerlink&quot; title=&quot;1.1 作为 Web 服务器&quot;&gt;&lt;/a&gt;1.1 作为 Web 服务器&lt;/h3&gt;&lt;p&gt;相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率。能够支持高达 50,000 个并发连接数的响应，其使用 epoll and kqueue 作为开发模型。&lt;/p&gt;
&lt;h3 id=&quot;1-2-作为负载均衡服务器&quot;&gt;&lt;a href=&quot;#1-2-作为负载均衡服务器&quot; class=&quot;headerlink&quot; title=&quot;1.2 作为负载均衡服务器&quot;&gt;&lt;/a&gt;1.2 作为负载均衡服务器&lt;/h3&gt;&lt;p&gt;Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。&lt;/p&gt;
&lt;p&gt;Nginx 安装非常的简单，配置文件 非常简洁（还能够支持perl语法），Bugs 非常少的服务器: Nginx 启动特别容易，并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动。&lt;/p&gt;
&lt;h2 id=&quot;二、安装&quot;&gt;&lt;a href=&quot;#二、安装&quot; class=&quot;headerlink&quot; title=&quot;二、安装&quot;&gt;&lt;/a&gt;二、安装&lt;/h2&gt;&lt;h3 id=&quot;2-1-添加仓库资源&quot;&gt;&lt;a href=&quot;#2-1-添加仓库资源&quot; class=&quot;headerlink&quot; title=&quot;2.1 添加仓库资源&quot;&gt;&lt;/a&gt;2.1 添加仓库资源&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/yum.repos.d/nginx.repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[nginx]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name=nginx repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseurl=http://nginx.org/packages/centos/7/$basearch/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgcheck=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enabled=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意 baseurl=&lt;a href=&quot;http://nginx.org/packages/OS/OSRELEASE/$basearch/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nginx.org/packages/OS/OSRELEASE/$basearch/&lt;/a&gt; 中 OS/OSRELEASE 表示系统和版本号，根据自己情况而定。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
</feed>
